{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","size","node","setNode","nextMove","setNextMove","time","setTime","snakeSize","setSnakeSize","game","setGame","useEffect","newNode","move","snake","localPlace","length","JSON","stringify","push","splice","interval","setInterval","Date","now","clearInterval","document","body","addEventListener","event","code","x","parseInt","Math","random","y","lines","Array","from","keys","map","line","coluns","column","className","find","element","key","Board","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNA0GeA,G,MAtGH,WAAO,IAAD,EACDC,mBAAS,IAAjBC,EADS,sBAEOD,qBAFP,mBAETE,EAFS,KAEJC,EAFI,OAGeH,mBAAS,GAHxB,mBAGTI,EAHS,KAGAC,EAHA,OAIOL,qBAJP,mBAITM,EAJS,KAIJC,EAJI,OAKkBP,mBAAS,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,KAL3C,mBAKTQ,EALS,KAKEC,EALF,OAMOT,oBAAS,GANhB,mBAMTU,EANS,KAMJC,EANI,KA4ChBC,qBAAU,WACJV,GAAKW,IArCE,SAACC,GACZ,IAAIC,EAAK,YAAOP,GACZQ,EAAU,YAAOR,EAAWO,EAAME,OAAO,IAC7C,OAAQH,GACN,IAAK,YACDE,EAAW,IAAM,EACnB,MACF,IAAK,aACDA,EAAW,IAAM,EACnB,MACF,IAAK,UACDA,EAAW,IAAM,EACnB,MACF,IAAK,YACDA,EAAW,IAAM,GAMrBA,EAAW,GAAK,GAChBA,EAAW,GAAMf,EAAK,GACtBe,EAAW,GAAK,GAChBA,EAAW,GAAMf,EAAK,IAEtBU,GAAQ,GACJO,KAAKC,UAAUJ,EAAOA,EAAME,OAAO,MAASC,KAAKC,UAAUH,KAC7DD,EAAMK,KAAKJ,GACPE,KAAKC,UAAUH,KAAgBE,KAAKC,UAAUjB,GAChDa,EAAMM,OAAO,EAAE,GAEflB,EAAQ,MACVM,EAAaM,IAOjBD,CAAKV,GAEL,IAAMkB,EAAWC,aAAY,WAAWb,GAAKH,EAAQiB,KAAKC,SAAS,KACnE,OAAO,WACLC,cAAcJ,MAGhB,CAAChB,IAGHqB,SAASC,KAAKC,iBAAiB,WAAW,SAASC,GACjDzB,EAAYyB,EAAMC,SAGpB,IAYMlB,EAAU,WACd,IAAMmB,EAAIC,SAASC,KAAKC,UAAYlC,EAAO,GAAK,GAC1CmC,EAAIH,SAASC,KAAKC,UAAYlC,EAAO,GAAK,GAChDE,EAAQ,CAAC6B,EAAEI,KAGPC,EAAQ,WACZ,IAAMA,EAAQC,MAAMC,KAAKD,MAAMrC,GAAMuC,QAAQC,KAAI,SAACC,GAChD,OApBW,SAACA,GACd,IAAMC,EAASL,MAAMC,KAAKD,MAAMrC,GAAMuC,QAAQC,KAAI,SAACG,GACjD,IAAIC,EAAY,QAKhB,OAJI3B,KAAKC,UAAUjB,KAAWgB,KAAKC,UAAU,CAACyB,EAAOF,MACnDG,GAAa,WACZrC,EAAUsC,MAAK,SAACC,GAAD,OAAa7B,KAAKC,UAAU4B,KAAa7B,KAAKC,UAAU,CAACyB,EAAOF,SAChFG,GAAa,UACR,yBAAKA,UAAWA,EAAWG,IAAKJ,OAEzC,OAAOD,EAWEA,CAAOD,MAEhB,OAAOL,GAGHY,EAAQ,WACZ,OAAOZ,KAGT,OACE,yBAAKQ,UAAU,OACb,yBAAKA,UAAU,QACZnC,EACC,kBAACuC,EAAD,MACA,8CCvFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e1621148.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './App.css'\n\n\nconst App = () => {\n  const [size] = useState(10)\n  const [node,setNode] = useState()\n  const [nextMove,setNextMove] = useState(0)\n  const [time,setTime] = useState()\n  const [snakeSize, setSnakeSize] = useState([[1,1],[1,2],[1,3]])\n  const [game,setGame] = useState(true)\n\n  const move = (move) => {\n    let snake = [...snakeSize]\n    let localPlace = [...snakeSize[(snake.length-1)]]\n    switch (move) {\n      case 'ArrowLeft':\n          localPlace[0] -= 1\n        break\n      case 'ArrowRight':\n          localPlace[0] += 1\n        break\n      case 'ArrowUp':\n          localPlace[1] -= 1\n        break\n      case 'ArrowDown':\n          localPlace[1] += 1\n        break\n      default:\n        break\n    }\n    if(\n      localPlace[0] < 0 ||\n      localPlace[0] > (size-1) ||\n      localPlace[1] < 0 ||\n      localPlace[1] > (size-1)\n    )\n      setGame(false)\n      if( JSON.stringify(snake[(snake.length-1)]) !== JSON.stringify(localPlace) ){\n        snake.push(localPlace)\n        if( JSON.stringify(localPlace) !== JSON.stringify(node) )\n          snake.splice(0,1)\n        else\n          setNode(null)\n        setSnakeSize(snake)\n      }\n  }\n\n  useEffect(() => {\n    if(!node)newNode()\n\n    move(nextMove)\n\n    const interval = setInterval(() => { if(game)setTime(Date.now())}, 500);\n    return () => {\n      clearInterval(interval);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[time])\n\n\n  document.body.addEventListener('keydown', function(event) {\n    setNextMove(event.code)\n  })\n\n  const coluns = (line) => {\n    const coluns = Array.from(Array(size).keys()).map((column) => {\n      let className = \"block\"\n      if( JSON.stringify(node)  === JSON.stringify([column,line]))\n        className += \" active\"\n      if(snakeSize.find((element) => JSON.stringify(element) === JSON.stringify([column,line]) ))\n        className += ' snake'\n      return <div className={className} key={column}/>\n    })\n    return coluns\n  }\n\n  const newNode = () => {\n    const x = parseInt(Math.random() * (size - 0) + 0)\n    const y = parseInt(Math.random() * (size - 0) + 0)\n    setNode([x,y])\n  }\n\n  const lines = () => {\n    const lines = Array.from(Array(size).keys()).map((line) => {\n      return coluns(line)\n    })\n    return lines\n  }\n\n  const Board = () => {\n    return lines()\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"game\">\n        {game?\n          <Board />:\n          <div>Game over</div>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}